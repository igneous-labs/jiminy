#![cfg_attr(not(test), no_std)]

//! Errors generated by programs.
//!
//! Current implementation is based on the `ProgramError` enum from
//! the Solana SDK:
//!
//! https://github.com/anza-xyz/agave/blob/master/sdk/program/src/program_error.rs
//!
//! Considerations:
//!
//! - Not deriving `thiserror::Error` for now, as it's not clear if it's needed.
//! - BorshIoError is omitted to avoid dependency on std (and borsh)
//!
//! Copied from https://github.com/anza-xyz/pinocchio/blob/1dec19bd17af38a360c9caca436741ef99f8a8be/sdk/pinocchio/src/program_error.rs

/// Reasons the program may fail.
#[derive(Clone, Debug, Eq, PartialEq)]
pub enum ProgramError {
    /// Allows on-chain programs to implement program-specific error types and see them returned
    /// by the Solana runtime. A program-specific error may be any type that is represented as
    /// or serialized to a u32 integer.
    ///
    /// Custom program error: `{0:#x}`
    Custom(u32),

    /// The arguments provided to a program instruction were invalid
    InvalidArgument,

    /// An instruction's data contents was invalid
    InvalidInstructionData,

    /// An account's data contents was invalid
    InvalidAccountData,

    /// An account's data was too small
    AccountDataTooSmall,

    /// An account's balance was too small to complete the instruction
    InsufficientFunds,

    /// The account did not have the expected program id
    IncorrectProgramId,

    /// A signature was required but not found
    MissingRequiredSignature,

    /// An initialize instruction was sent to an account that has already been initialized
    AccountAlreadyInitialized,

    /// An attempt to operate on an account that hasn't been initialized
    UninitializedAccount,

    /// The instruction expected additional account keys
    NotEnoughAccountKeys,

    /// Failed to borrow a reference to account data, already borrowed
    AccountBorrowFailed,

    /// Length of the seed is too long for address generation
    MaxSeedLengthExceeded,

    /// Provided seeds do not result in a valid address
    InvalidSeeds,

    /// An account does not have enough lamports to be rent-exempt
    AccountNotRentExempt,

    /// Unsupported sysvar
    UnsupportedSysvar,

    /// Provided owner is not allowed
    IllegalOwner,

    /// Accounts data allocations exceeded the maximum allowed per transaction
    MaxAccountsDataAllocationsExceeded,

    /// Account data reallocation was invalid
    InvalidRealloc,

    /// Instruction trace length exceeded the maximum allowed per transaction
    MaxInstructionTraceLengthExceeded,

    /// Builtin programs must consume compute units
    BuiltinProgramsMustConsumeComputeUnits,

    /// Invalid account owner
    InvalidAccountOwner,

    /// Program arithmetic overflowed
    ArithmeticOverflow,

    /// Account is immutable
    Immutable,

    /// Incorrect authority provided
    IncorrectAuthority,
}

/// Builtin return values occupy the upper 32 bits
const BUILTIN_BIT_SHIFT: usize = 32;
macro_rules! to_builtin {
    ($error:expr) => {
        ($error as u64) << BUILTIN_BIT_SHIFT
    };
}

pub const CUSTOM_ZERO: u64 = to_builtin!(1);
pub const INVALID_ARGUMENT: u64 = to_builtin!(2);
pub const INVALID_INSTRUCTION_DATA: u64 = to_builtin!(3);
pub const INVALID_ACCOUNT_DATA: u64 = to_builtin!(4);
pub const ACCOUNT_DATA_TOO_SMALL: u64 = to_builtin!(5);
pub const INSUFFICIENT_FUNDS: u64 = to_builtin!(6);
pub const INCORRECT_PROGRAM_ID: u64 = to_builtin!(7);
pub const MISSING_REQUIRED_SIGNATURES: u64 = to_builtin!(8);
pub const ACCOUNT_ALREADY_INITIALIZED: u64 = to_builtin!(9);
pub const UNINITIALIZED_ACCOUNT: u64 = to_builtin!(10);
pub const NOT_ENOUGH_ACCOUNT_KEYS: u64 = to_builtin!(11);
pub const ACCOUNT_BORROW_FAILED: u64 = to_builtin!(12);
pub const MAX_SEED_LENGTH_EXCEEDED: u64 = to_builtin!(13);
pub const INVALID_SEEDS: u64 = to_builtin!(14);
// pub const BORSH_IO_ERROR: u64 = to_builtin!(15);
pub const ACCOUNT_NOT_RENT_EXEMPT: u64 = to_builtin!(16);
pub const UNSUPPORTED_SYSVAR: u64 = to_builtin!(17);
pub const ILLEGAL_OWNER: u64 = to_builtin!(18);
pub const MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED: u64 = to_builtin!(19);
pub const INVALID_ACCOUNT_DATA_REALLOC: u64 = to_builtin!(20);
pub const MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED: u64 = to_builtin!(21);
pub const BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS: u64 = to_builtin!(22);
pub const INVALID_ACCOUNT_OWNER: u64 = to_builtin!(23);
pub const ARITHMETIC_OVERFLOW: u64 = to_builtin!(24);
pub const IMMUTABLE: u64 = to_builtin!(25);
pub const INCORRECT_AUTHORITY: u64 = to_builtin!(26);

impl ProgramError {
    #[inline]
    pub const fn from_u64(error: u64) -> Self {
        match error {
            CUSTOM_ZERO => Self::Custom(0),
            INVALID_ARGUMENT => Self::InvalidArgument,
            INVALID_INSTRUCTION_DATA => Self::InvalidInstructionData,
            INVALID_ACCOUNT_DATA => Self::InvalidAccountData,
            ACCOUNT_DATA_TOO_SMALL => Self::AccountDataTooSmall,
            INSUFFICIENT_FUNDS => Self::InsufficientFunds,
            INCORRECT_PROGRAM_ID => Self::IncorrectProgramId,
            MISSING_REQUIRED_SIGNATURES => Self::MissingRequiredSignature,
            ACCOUNT_ALREADY_INITIALIZED => Self::AccountAlreadyInitialized,
            UNINITIALIZED_ACCOUNT => Self::UninitializedAccount,
            NOT_ENOUGH_ACCOUNT_KEYS => Self::NotEnoughAccountKeys,
            ACCOUNT_BORROW_FAILED => Self::AccountBorrowFailed,
            MAX_SEED_LENGTH_EXCEEDED => Self::MaxSeedLengthExceeded,
            INVALID_SEEDS => Self::InvalidSeeds,
            ACCOUNT_NOT_RENT_EXEMPT => Self::AccountNotRentExempt,
            UNSUPPORTED_SYSVAR => Self::UnsupportedSysvar,
            ILLEGAL_OWNER => Self::IllegalOwner,
            MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED => Self::MaxAccountsDataAllocationsExceeded,
            INVALID_ACCOUNT_DATA_REALLOC => Self::InvalidRealloc,
            MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED => Self::MaxInstructionTraceLengthExceeded,
            BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS => {
                Self::BuiltinProgramsMustConsumeComputeUnits
            }
            INVALID_ACCOUNT_OWNER => Self::InvalidAccountOwner,
            ARITHMETIC_OVERFLOW => Self::ArithmeticOverflow,
            IMMUTABLE => Self::Immutable,
            INCORRECT_AUTHORITY => Self::IncorrectAuthority,
            _ => Self::Custom(error as u32),
        }
    }

    #[inline]
    pub const fn into_u64(self) -> u64 {
        match self {
            Self::InvalidArgument => INVALID_ARGUMENT,
            Self::InvalidInstructionData => INVALID_INSTRUCTION_DATA,
            Self::InvalidAccountData => INVALID_ACCOUNT_DATA,
            Self::AccountDataTooSmall => ACCOUNT_DATA_TOO_SMALL,
            Self::InsufficientFunds => INSUFFICIENT_FUNDS,
            Self::IncorrectProgramId => INCORRECT_PROGRAM_ID,
            Self::MissingRequiredSignature => MISSING_REQUIRED_SIGNATURES,
            Self::AccountAlreadyInitialized => ACCOUNT_ALREADY_INITIALIZED,
            Self::UninitializedAccount => UNINITIALIZED_ACCOUNT,
            Self::NotEnoughAccountKeys => NOT_ENOUGH_ACCOUNT_KEYS,
            Self::AccountBorrowFailed => ACCOUNT_BORROW_FAILED,
            Self::MaxSeedLengthExceeded => MAX_SEED_LENGTH_EXCEEDED,
            Self::InvalidSeeds => INVALID_SEEDS,
            Self::AccountNotRentExempt => ACCOUNT_NOT_RENT_EXEMPT,
            Self::UnsupportedSysvar => UNSUPPORTED_SYSVAR,
            Self::IllegalOwner => ILLEGAL_OWNER,
            Self::MaxAccountsDataAllocationsExceeded => MAX_ACCOUNTS_DATA_ALLOCATIONS_EXCEEDED,
            Self::InvalidRealloc => INVALID_ACCOUNT_DATA_REALLOC,
            Self::MaxInstructionTraceLengthExceeded => MAX_INSTRUCTION_TRACE_LENGTH_EXCEEDED,
            Self::BuiltinProgramsMustConsumeComputeUnits => {
                BUILTIN_PROGRAMS_MUST_CONSUME_COMPUTE_UNITS
            }
            Self::InvalidAccountOwner => INVALID_ACCOUNT_OWNER,
            Self::ArithmeticOverflow => ARITHMETIC_OVERFLOW,
            Self::Immutable => IMMUTABLE,
            Self::IncorrectAuthority => INCORRECT_AUTHORITY,
            Self::Custom(error) => {
                if error == 0 {
                    CUSTOM_ZERO
                } else {
                    error as u64
                }
            }
        }
    }
}

impl From<u64> for ProgramError {
    #[inline]
    fn from(error: u64) -> Self {
        Self::from_u64(error)
    }
}

impl From<ProgramError> for u64 {
    #[inline]
    fn from(error: ProgramError) -> Self {
        error.into_u64()
    }
}
